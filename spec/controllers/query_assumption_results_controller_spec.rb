require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe QueryAssumptionResultsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # QueryAssumptionResult. As you add validations to QueryAssumptionResult, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {result: true}
  }

  let(:invalid_attributes) {
    {result: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QueryAssumptionResultsController. Be sure to keep this updated too.
  let(:valid_session) { {format: :js} }

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested query_assumption_result" do
        query_assumption_result = QueryAssumptionResult.create! valid_attributes
        put :update, {:id => query_assumption_result.to_param, :query_assumption_result => new_attributes}, valid_session
        query_assumption_result.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested query_assumption_result as @query_assumption_result" do
        query_assumption_result = QueryAssumptionResult.create! valid_attributes
        xhr :patch, :update, {:id => query_assumption_result.to_param, :query_assumption_result => valid_attributes}, valid_session
        expect(assigns(:query_assumption_result)).to eq(query_assumption_result)
      end
    end

    context "with invalid params" do
      it "assigns the query_assumption_result as @query_assumption_result" do
        query_assumption_result = QueryAssumptionResult.create! valid_attributes
        xhr :patch, :update, {:id => query_assumption_result.to_param, :query_assumption_result => invalid_attributes}, valid_session
        expect(assigns(:query_assumption_result)).to eq(query_assumption_result)
      end

      it "re-renders the 'edit' template" do
        query_assumption_result = QueryAssumptionResult.create! valid_attributes
        xhr :patch, :update, {:id => query_assumption_result.to_param, :query_assumption_result => invalid_attributes}, valid_session
        expect(response).to render_template("update_error")
      end
    end
  end


end
