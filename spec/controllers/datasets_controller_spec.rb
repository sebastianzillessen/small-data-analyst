require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe DatasetsController, type: :controller do
  login_clinician

  let(:valid_attributes) {
    {name: Faker::Name.first_name, data_file: fixture_file_upload('spec/fixtures/files/ovarian.csv', 'text/csv')}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let!(:dataset) { create(:dataset, user: @user) }

  describe "GET #index" do
    it "assigns all datasets as @datasets" do
      puts "Hello"
      get :index, {}
      expect(assigns(:datasets)).to eq([dataset])
    end
  end

  describe "GET #show" do
    it "assigns the requested dataset as @dataset" do
      get :show, {:id => dataset.to_param}
      expect(assigns(:dataset)).to eq(dataset)
    end
  end

  describe "GET #new" do
    it "assigns a new dataset as @dataset" do
      get :new, {}
      expect(assigns(:dataset)).to be_a_new(Dataset)
    end
  end

  describe "GET #edit" do
    it "assigns the requested dataset as @dataset" do
      get :edit, {:id => dataset.to_param}
      expect(assigns(:dataset)).to eq(dataset)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Dataset" do
        expect {
          post :create, {:dataset => valid_attributes}
        }.to change(Dataset, :count).by(1)
      end

      it "assigns a newly created dataset as @dataset" do
        post :create, {:dataset => valid_attributes}
        expect(assigns(:dataset)).to be_a(Dataset)
        expect(assigns(:dataset)).to be_persisted
      end

      it "redirects to the created dataset" do
        post :create, {:dataset => valid_attributes}
        expect(response).to redirect_to(Dataset.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved dataset as @dataset" do
        post :create, {:dataset => invalid_attributes}
        expect(assigns(:dataset)).to be_a_new(Dataset)
      end

      it "re-renders the 'new' template" do
        post :create, {:dataset => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested dataset" do
        put :update, {:id => dataset.to_param, :dataset => new_attributes}
        dataset.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested dataset as @dataset" do

        put :update, {:id => dataset.to_param, :dataset => valid_attributes}
        expect(assigns(:dataset)).to eq(dataset)
      end

      it "redirects to the dataset" do
        put :update, {:id => dataset.to_param, :dataset => valid_attributes}
        expect(response).to redirect_to(dataset)
      end
    end

    context "with invalid params" do
      it "assigns the dataset as @dataset" do
        put :update, {:id => dataset.to_param, :dataset => invalid_attributes}
        expect(assigns(:dataset)).to eq(dataset)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => dataset.to_param, :dataset => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested dataset" do
      expect {
        delete :destroy, {:id => dataset.to_param}
      }.to change(Dataset, :count).by(-1)
    end

    it "redirects to the datasets list" do
      delete :destroy, {:id => dataset.to_param}
      expect(response).to redirect_to(datasets_url)
    end
  end

end
